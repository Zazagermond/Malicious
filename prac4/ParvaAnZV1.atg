  COMPILER ParvaAnZV1 $CN
  /* Parva level 1 grammar  - Coco/R for Java (EBNF)
     P.D. Terry, Rhodes University, modified by KL Bradshaw, 2023
     Basic Grammar only with Pascal precedence -- for prac 4 */
	// Malicious Hadeda :Dean, Zaza, Alisha
	// changed lines: 20 (works), 33-36, 40-47, 56-57, 76

  CHARACTERS
    lf         = CHR(10) .
    backslash  = CHR(92) .
    control    = CHR(0) .. CHR(31) .
    letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                 + "abcdefghijklmnopqrstuvwxyz" .
    digit      = "0123456789" .
    stringCh   = ANY - '"' - control - backslash .
    charCh     = ANY - "'" - control - backslash .
    printable  = ANY - control .

  TOKENS
    identifier = letter { letter | digit | "_" { letter | digit}} .
    number     = digit { digit } .
    charLit    = "'" ( charCh   | backslash printable ) "'" .
    stringLit  = '"' { stringCh | backslash printable } '"' .

  COMMENTS FROM "//" TO lf
  COMMENTS FROM "/*" TO "*/"
  IGNORE CHR(9) .. CHR(13)

  PRODUCTIONS
    ParvaAnZV1             = "void" identifier "(" ")" Block .
    Block             = "{" { Statement } "}" .
    Statement         =   Block | ";"
                        | VarDeclarations
                        | Assignment | IfStatement | WhileStatement | DoWhileStatement
                        | ReturnStatement | HaltStatement | BreakStatement | ContinueStatement
                        | ReadStatement | WriteStatement | ForStatement .
    
    VarDeclarations   = Type OneVar { "," OneVar } ";" .
    OneVar            = identifier [ "=" Expression ] .
    Assignment        = Designator {"," Expression |"=" Expression}"=" Expression { "," Expression} ";" .
    Assignment =Desinator {"=" Experssion} "=" Expression ";" . /*added multiple assignment */
//Alishas assignments for arithmetic operation
    Assignment        = Designator "=" Expression ";" 
                        | Designator "+=" Expression ";" 
                        | Designator "-=" Expression ";" 
                        | Designator "*=" Expression ";" 
                        | Designator "/=" Expression ";" .
    Designator        = identifier [ "[" Expression "]" ] .
    IfStatement       = "if" "(" Condition ")" Statement {"elsif" "(" Condition ")" Statement} {"else" Statement} .
    WhileStatement    = "while" "(" Condition ")" Statement .
    DoWhileStatement  = "do" Statement "while" "(" Condition ")".
    BreakStatement    = "break" ";" .
    ContinueStatement = "continue" ";" .
    ReturnStatement   = "return" ";" .
    HaltStatement     = "halt" ";" .
    ForStatement      = "for" ( PythonLoop ) Statement .
    PythonLoop 	      = identifier "in" "(" Expression { "," Expression } ")" .
    ReadStatement     = "read" "(" ReadElement
                                   { "," ReadElement } ")" ";" .
    ReadElement       = stringLit | Designator .
    WriteStatement    = "write" "(" WriteElement
                                    { "," WriteElement } ")" ";" .
    WriteElement      = stringLit | Expression .
    Condition         = Expression .
    Expression        = AddExp [ RelOp AddExp ] .
    AddExp            = [ "+" | "-" ] Term { AddOp Term } .
    Term              = Factor { MulOp Factor } .
    Factor            =   Designator | Constant
                        | "new" BasicType "[" Expression "]"
                        | "!" Factor | "(" Expression ")" .
    Constant          =   number | charLit
                        | "true" | "false" | "null" . 
    Type              = BasicType [ "[]" ] .
    BasicType         = "int" | "bool" .
    AddOp             = "+" | "-" | "||" .
    MulOp             = "*" | "/" | "%" | "&&" .
    RelOp             = "==" | "!=" | "<" | "<=" | ">" | ">=" .
  END ParvaAnZV1.
