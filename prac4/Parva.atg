  COMPILER Parva $CN
  /* Parva level 1 grammar  - Coco/R for Java (EBNF)
     P.D. Terry, Rhodes University, modified by KL Bradshaw, 2023
     Basic Grammar only with Pascal precedence -- for prac 4 */

  CHARACTERS
    lf         = CHR(10) .
    backslash  = CHR(92) .
    control    = CHR(0) .. CHR(31) .
    letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                 + "abcdefghijklmnopqrstuvwxyz" .
    digit      = "0123456789" .
    stringCh   = ANY - '"' - control - backslash .
    charCh     = ANY - "'" - control - backslash .
    printable  = ANY - control .

  TOKENS
    identifier = letter { letter | digit | "_" {"_"}(letter|digit) } .
    number     = digit { digit } .
    charLit    = "'" ( charCh   | backslash printable ) "'" .
    stringLit  = '"' { stringCh | backslash printable } '"' .

  COMMENTS FROM "//" TO lf
  COMMENTS FROM "/*" TO "*/"
  IGNORE CHR(9) .. CHR(13)

  PRODUCTIONS
    Parva             = "void" identifier "(" ")" Block .
    Block             = "{" { Statement } "}" .
    Statement         =   Block | ";"
                        | VarDeclarations
                        | Assignment | IfStatement | WhileStatement|DoWhileStatement|ForLoopStatement
                        | ReturnStatement | HaltStatement|BreakStatement |ContinueStatement
                        | ReadStatement | WriteStatement .
    
    VarDeclarations   = Type OneVar { "," OneVar } ";" .
    OneVar            = identifier [ "=" Expression ] .
    Assignment        = Designator {"," Expression } OpAssignment Expression { "," Expression} ";" .
	OpAssignment      = "="|"+="|"-="|"*="|"/=" .
    Designator        = identifier [ "[" Expression "]" ] .
    IfStatement       ="if" "(" Condition ")" Statement {"elsif" "(" Condition ")" Statement} ["else" Statement] .
    WhileStatement    = "while" "(" Condition ")" Statement .
    DoWhileStatement  = "do"  Statement "while" "(" Condition ")" ";" . 
	ForLoopStatement  = "for" Expression "=" Expression ("to"|"downto") Expression "do" Statement .
    BreakStatement    = "break" ";" .
    ContinueStatement = "continue" ";" .
    ReturnStatement   = "return" ";" .
    HaltStatement     = "halt" ";" .
    ReadStatement     = "read" "(" ReadElement
                                   { "," ReadElement } ")" ";" .
    ReadElement       = stringLit | Designator .
    WriteStatement    = "write" "(" WriteElement
                                    { "," WriteElement } ")" ";" .
    WriteElement      = stringLit | Expression .
    Condition         = Expression .
    Expression        = AddExp [ RelOp AddExp ] .
    AddExp            = [ "+" | "-" ] Term { AddOp Term } .
    Term              = Factor { MulOp Factor } .
    Factor            =   Designator | Constant
                        | "new" BasicType "[" Expression "]"
                        | "!" Factor | "(" Expression ")" .
    Constant          =   number | charLit
                        | "true" | "false" | "null" . 
    Type              = BasicType [ "[]" ] .
    BasicType         = "int" | "bool"|"const" .
    AddOp             = "+" | "-" | "||" .
    MulOp             = "*" | "/" | "&&" |"%" .
    RelOp             = "==" | "!=" | "<" | "<=" | ">" | ">=".
  END Parva.
