import library.*;
import java.util.*;

COMPILER Bool $CN
/* Boolean expression calculator
   P.D. Terry, modified by KL Bradshaw 2024 */

  static boolean[] mem = new boolean[26];
  static boolean[] declared=new boolean[26];

IGNORECASE

CHARACTERS
  letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
TOKENS
  variable   = letter .

COMMENTS FROM "(*" TO "*)"  NESTED
COMMENTS FROM "/*" TO "*/"  NESTED

IGNORE CHR(0) .. CHR(31)

PRODUCTIONS
  Bool                               					(. int index = 0;
														boolean value = false;
														char var;
														for (int i = 0; i < 26; i++) mem[i] = false; .)
  = { ( Variable<out var>              					(. 	index = var - 'A'; .)
         "=" Expression	<out value>						(. mem[index] = value;
															declared[index]=true;.)
		| "print" Expression <out value>				(. IO.writeLine(value); .)
	   )
       ";"
    } EOF .

  Variable<out char var>
  = variable                         		(. 
												var = token.val.charAt(0);
												.)
  .

  Expression<out boolean calvar> 			
  = Term <out calvar>						
    { Or Term <out boolean expval>					(. calvar=calvar||expval;  .)
    } .

  
  Term <out boolean termvar> 
  = Factor <out termvar>	
    { [ And ] Factor <out boolean loktv>  (.termvar=termvar&&loktv;.)
    } .


  Factor <out boolean facvar> 				(.  facvar=false;
												.)
 /* Note that ' means not as a postfix operator, e.g. b'  means "not b" */
   =   "NOT" Factor <out facvar>		(. facvar=!facvar; .)
    | Primary <out facvar>			
      { "'" (. facvar=!facvar;
				IO.writeLine("Going here");.)}
        .

  Primary <out boolean pfacvar>			(.pfacvar=false;.)
	=   True									(. pfacvar=true;.)						
    | False										(.	pfacvar=false;.) 									
    | variable							  	 	(.if (declared[(int)(token.val.charAt(0)-'A')]) ;
												else{
												IO.writeLine("Variable undeclared");
												System.exit(0);}.)
    | "(" Expression <out pfacvar> ")" .

  True="TRUE" | "1" .
  False="FALSE" | "0" 	.
  And   = "AND" | "&&" | "." .
  Or    = "OR" | "||" | "+" .
END Bool.
