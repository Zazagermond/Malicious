
import java.util.*;
import library.*;
COMPILER EBNF $CN
/* Parse a set of EBNF productions
   P.D. Terry, modified by KL Bradshaw, 2024 */
  static double[] mem = new double[100];
  static Table SymbolTable = new Table();
  static int lineref=0;
CHARACTERS
  letter   = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
  lowline  = "_" .
  control  = CHR(0) .. CHR(31) .
  digit    = "0123456789" .
  noquote1 = ANY - "'" - control .
  noquote2 = ANY - '"' - control .

TOKENS
  nonterminal = letter { letter | lowline | digit } .
  terminal    = "'" noquote1 { noquote1 } "'" | '"' noquote2 { noquote2 } '"' .

COMMENTS FROM "(*" TO "*)"  NESTED

IGNORE control

PRODUCTIONS
   EBNF              
   =
     { Production     (.lineref=0;.)
     }          (.SymbolTable.printTable();.)
     EOF  .

   Production
   =
     SYNC nonterminal (.boolean decalred= SymbolTable.ccontains(token.val);
                        SymbolTable.addRef(token.val, decalred, lineref);
                        lineref+=1;.)
     WEAK "="
     Expression 
     SYNC "." .

   Expression 
   =
   Term
   { WEAK "|" Term
   } .

   Term
   =
   [ Factor
     { Factor  (. .)
     }
   ] .

   Factor
   =
       nonterminal (.   boolean decalred = SymbolTable.ccontains(token.val);
                        SymbolTable.addRef(token.val, decalred, lineref);
                        lineref+=1;.)
     | terminal
     | "[" Expression "]"
     | "(" Expression ")"
     | "{" Expression "}" .

END EBNF.
